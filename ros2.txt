# ros2 node list
# ros2 node info <node-name>
# ros2 topic list
# ros2 service list
# ros2 action list

# ros build tool  colcon
	sudo apt install python3-colcon-common-extensions
	 cd /usr/share/colcon_argcomplete/hook/
	 source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash
	 

# create workspace 
	mkdir ros_ws
	mkdir src (in the ros_ws)
	colcon build ( in the ros_ws . )
	source ~/ros_ws/install/setup.bash
	

# create package 
	~/ros_ws/src$ ros2 pkg create my_robot_controller --build-type ament_python --	  
									    dependencies rclpy 
		 	pkg name 			 build_type		     dependency
	
# ~/ros_ws/src$ colcon build

# install pip3
	sudo apt install python3-pip


pip3 list | grep setuptools
pip3 install setuptools==58.2.0


# for run python file
	./filename.py
 
 # for dynamic 
 	 colcon build --symlink-install 
 	 source ~/.bashrc
 	 
 #  ros2_ws 
 	colcon build
 	then you can run nodes 
 		ros2 run pkg_name node_name
 
 # setup.py
 	"test_node = pkg_name.node_name:funtion_name"
 
 # topic 
 	ros2 topic list
 	ros2 topic info /chatter
 	ros2 interface show [type_name]
 	ros2 topic echo /chatter
 	
 # turtle
	ros2 run turtlesim turtlesim_node
 	ros2 run turtlesim turtle_teleop_key
 
 # publisher
 	

 
 /*
 #!/usr/bin/env python3 
import rclpy
from rclpy.node import Node

class MyNode(Node):
    def __init__(self):
        super().__init__("first_node")
        self.get_logger().info("  ros")
        

def main(args=None):
    rclpy.init(args=args)

    node = MyNode()
    rclpy.spin(node) 
    rclpy.shutdown()

if __name__ == '__main__':
    main()

            "test_node = my_robot_controller.my_first_node:main"

*/
#!/usr/bin/env python3 
import rclpy
from rclpy.node import Node

class MyNode(Node):
    def __init__(self):
        super().__init__("first_node")
        self.cnt = 0

        self.create_timer(1.0, self.timer_callback)

    def timer_callback(self):
        self.get_logger().info("hello " + str(self.cnt))
        self.cnt += 1

def main(args=None):
    rclpy.init(args=args)

    node = MyNode()
    rclpy.spin(node) 
    rclpy.shutdown()

if __name__ == '__main__':
    main()





